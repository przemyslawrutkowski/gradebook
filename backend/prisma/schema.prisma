generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_TEST_URL")
}

model attendances {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  date_time   DateTime @db.Timestamp(0)
  was_present Boolean  @default(dbgenerated("b'0'")) @db.Bit(1)
  was_late    Boolean  @default(dbgenerated("b'0'")) @db.Bit(1)
  student_id  Bytes    @db.Binary(16)
  lesson_id   Bytes    @db.Binary(16)
  students    students @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendances_ibfk_1")
  lessons     lessons  @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "attendances_ibfk_2")

  @@unique([student_id, lesson_id], map: "student_id")
  @@index([lesson_id], map: "lesson_id")
}

model badges {
  id          Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  category_id Bytes  @db.Binary(16)
}

model badges_categories {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @db.VarChar(255)
}

model badges_history {
  id           Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  date_awarder DateTime @db.Timestamp(0)
  student_id   Bytes    @db.Binary(16)
  badge_id     Bytes    @db.Binary(16)
}

model classes {
  id             Bytes        @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  class_name_id  Bytes        @db.Binary(16)
  school_year_id Bytes        @db.Binary(16)
  teacher_id     Bytes?       @db.Binary(16)
  class_names    class_names  @relation(fields: [class_name_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_1")
  teachers       teachers?    @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_2")
  school_years   school_years @relation(fields: [school_year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_3")
  lessons        lessons[]
  students       students[]

  @@unique([class_name_id, school_year_id], map: "class_name_id")
  @@index([teacher_id], map: "teacher_id")
  @@index([school_year_id], map: "school_year_id")
}

model event_types {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @db.VarChar(255)
}

model grades_gradebook {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  description String   @db.VarChar(255)
  grade       Int      @db.TinyInt
  date_given  DateTime @db.Timestamp(0)
  student_id  Bytes    @db.Binary(16)
  subject_id  Bytes    @db.Binary(16)
  teacher_id  Bytes    @db.Binary(16)
  students    students @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grades_gradebook_ibfk_1")
  subjects    subjects @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grades_gradebook_ibfk_2")
  teachers    teachers @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "grades_gradebook_ibfk_3")

  @@index([student_id], map: "student_id")
  @@index([subject_id], map: "subject_id")
  @@index([teacher_id], map: "teacher_id")
}

model homeworks {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  description String   @db.VarChar(255)
  deadline    DateTime @db.Date
  lesson_id   Bytes    @unique(map: "lesson_id") @db.Binary(16)
  lessons     lessons  @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "homeworks_ibfk_1")
}

model lessons {
  id           Bytes         @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  description  String?       @db.VarChar(255)
  date         DateTime      @db.Date
  start_time   DateTime      @db.Time(0)
  end_time     DateTime      @db.Time(0)
  is_completed Boolean       @default(dbgenerated("b'0'")) @db.Bit(1)
  teacher_id   Bytes         @db.Binary(16)
  class_id     Bytes         @db.Binary(16)
  subject_id   Bytes         @db.Binary(16)
  semester_id  Bytes         @db.Binary(16)
  attendances  attendances[]
  homeworks    homeworks?
  teachers     teachers      @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lessons_ibfk_1")
  classes      classes       @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lessons_ibfk_2")
  subjects     subjects      @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lessons_ibfk_3")
  semesters    semesters     @relation(fields: [semester_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "lessons_ibfk_4")

  @@index([class_id], map: "class_id")
  @@index([subject_id], map: "subject_id")
  @@index([teacher_id], map: "teacher_id")
  @@index([semester_id], map: "semester_id")
}

model messages {
  id               Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  subject          String   @db.VarChar(255)
  content          String   @db.VarChar(255)
  date_time        DateTime @db.Timestamp(0)
  was_read         Boolean  @default(dbgenerated("b'0'")) @db.Bit(1)
  sender_id        Bytes    @db.Binary(16)
  sender_type_id   Bytes    @db.Binary(16)
  receiver_id      Bytes    @db.Binary(16)
  receiver_type_id Bytes    @db.Binary(16)
}

model parents {
  id                     Bytes              @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  pesel                  String             @unique(map: "pesel") @db.VarChar(11)
  email                  String             @unique(map: "email") @db.VarChar(255)
  phone_number           String             @unique(map: "phone_number") @db.VarChar(9)
  password               String             @db.VarChar(255)
  first_name             String             @db.VarChar(255)
  last_name              String             @db.VarChar(255)
  reset_password_token   String?            @unique(map: "reset_password_token") @db.VarChar(512)
  reset_password_expires DateTime?          @db.Timestamp(0)
  students_parents       students_parents[]
}

model problem_types {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @db.VarChar(255)
}

model problems_gradebook {
  id              Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  description     String   @db.VarChar(255)
  reported_time   DateTime @db.Timestamp(0)
  problem_type_id Bytes    @db.Binary(16)
  reporter_id     Bytes    @db.Binary(16)
  user_type_id    Bytes    @db.Binary(16)
  status_id       Bytes    @db.Binary(16)
}

model problems_history_gradebook {
  id                 Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  change_description String   @db.VarChar(255)
  change_time        DateTime @db.Timestamp(0)
  problem_id         Bytes    @db.Binary(16)
  status_id          Bytes    @db.Binary(16)
}

model school_events {
  id            Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name          String   @db.VarChar(255)
  location      String   @db.VarChar(255)
  description   String   @db.VarChar(255)
  start_time    DateTime @db.Timestamp(0)
  end_time      DateTime @db.Timestamp(0)
  event_type_id Bytes    @db.Binary(16)
}

model statuses {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @db.VarChar(255)
}

model students {
  id                     Bytes              @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  pesel                  String             @unique(map: "pesel") @db.VarChar(11)
  email                  String             @unique(map: "email") @db.VarChar(255)
  phone_number           String             @unique(map: "phone_number") @db.VarChar(9)
  password               String             @db.VarChar(255)
  first_name             String             @db.VarChar(255)
  last_name              String             @db.VarChar(255)
  reset_password_token   String?            @unique(map: "reset_password_token") @db.VarChar(512)
  reset_password_expires DateTime?          @db.Timestamp(0)
  class_id               Bytes?             @db.Binary(16)
  attendances            attendances[]
  grades_gradebook       grades_gradebook[]
  classes                classes?           @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "students_ibfk_1")
  students_parents       students_parents[]

  @@index([class_id], map: "class_id")
}

model students_parents {
  student_id Bytes    @db.Binary(16)
  parent_id  Bytes    @db.Binary(16)
  students   students @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "students_parents_ibfk_1")
  parents    parents  @relation(fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "students_parents_ibfk_2")

  @@id([student_id, parent_id])
  @@index([parent_id], map: "parent_id")
}

model subjects {
  id                Bytes               @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name              String              @unique(map: "name") @db.VarChar(255)
  grades_gradebook  grades_gradebook[]
  lessons           lessons[]
  teachers_subjects teachers_subjects[]
}

model surveys {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  start_time  DateTime @db.Timestamp(0)
  end_time    DateTime @db.Timestamp(0)
}

model surveys_possible_responses {
  id          Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  response    String @db.VarChar(255)
  question_id Bytes  @db.Binary(16)
}

model surveys_questions {
  id               Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  question         String @db.VarChar(255)
  survey_id        Bytes  @db.Binary(16)
  question_type_id Bytes  @db.Binary(16)
}

model surveys_questions_types {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @db.VarChar(255)
}

model surveys_responses {
  id          Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  response    String @db.VarChar(255)
  student_id  Bytes  @db.Binary(16)
  question_id Bytes  @db.Binary(16)
}

model teachers {
  id                     Bytes               @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  pesel                  String              @unique(map: "pesel") @db.VarChar(11)
  email                  String              @unique(map: "email") @db.VarChar(255)
  phone_number           String              @unique(map: "phone_number") @db.VarChar(9)
  password               String              @db.VarChar(255)
  first_name             String              @db.VarChar(255)
  last_name              String              @db.VarChar(255)
  reset_password_token   String?             @unique(map: "reset_password_token") @db.VarChar(512)
  reset_password_expires DateTime?           @db.Timestamp(0)
  classes                classes[]
  grades_gradebook       grades_gradebook[]
  lessons                lessons[]
  teachers_subjects      teachers_subjects[]
}

model teachers_subjects {
  teacher_id Bytes    @db.Binary(16)
  subject_id Bytes    @db.Binary(16)
  teachers   teachers @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_subjects_ibfk_1")
  subjects   subjects @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "teachers_subjects_ibfk_2")

  @@id([teacher_id, subject_id])
  @@index([subject_id], map: "subject_id")
}

model updates {
  id           Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  description  String   @db.VarChar(255)
  version      String   @db.VarChar(255)
  release_time DateTime @db.Timestamp(0)
}

model administrators {
  id                     Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  pesel                  String    @unique(map: "pesel") @db.VarChar(11)
  email                  String    @unique(map: "email") @db.VarChar(255)
  phone_number           String    @unique(map: "phone_number") @db.VarChar(9)
  password               String    @db.VarChar(255)
  first_name             String    @db.VarChar(255)
  last_name              String    @db.VarChar(255)
  reset_password_token   String?   @unique(map: "reset_password_token") @db.VarChar(512)
  reset_password_expires DateTime? @db.Timestamp(0)
}

model user_types {
  id   Bytes  @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String @unique(map: "name") @db.VarChar(255)
}

model school_years {
  id         Bytes       @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name       String      @unique(map: "name") @db.VarChar(9)
  start_date DateTime    @db.Date
  end_date   DateTime    @db.Date
  classes    classes[]
  semesters  semesters[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model semesters {
  id             Bytes        @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  semester       Int          @db.TinyInt
  start_date     DateTime     @db.Date
  end_date       DateTime     @db.Date
  school_year_id Bytes        @db.Binary(16)
  lessons        lessons[]
  school_years   school_years @relation(fields: [school_year_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "semesters_ibfk_1")

  @@unique([semester, school_year_id], map: "semester")
  @@index([school_year_id], map: "school_year_id")
}

model class_names {
  id      Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name    String    @unique(map: "name") @db.VarChar(10)
  classes classes[]
}
